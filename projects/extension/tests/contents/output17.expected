DROP DATABASE
CREATE DATABASE
CREATE EXTENSION
                                                                                                                   Objects in extension "ai"
                                                                                                                      Object description                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 function ai.anthropic_generate(text,jsonb,integer,text,text,text,double precision,integer,text,text,text[],double precision,jsonb,jsonb,integer,double precision,boolean)
 function ai.anthropic_list_models(text,text,text,boolean)
 function ai.chunk_text_recursively(text,integer,integer,text[],boolean)
 function ai.chunk_text(text,integer,integer,text,boolean)
 function ai.cohere_chat_complete(text,jsonb,text,text,jsonb,jsonb,jsonb,jsonb,text,integer,text[],double precision,integer,double precision,double precision,integer,double precision,boolean,text,boolean,boolean)
 function ai.cohere_classify_simple(text,text[],text,text,jsonb,text,boolean)
 function ai.cohere_classify(text,text[],text,text,jsonb,text,boolean)
 function ai.cohere_detokenize(text,integer[],text,text,boolean)
 function ai.cohere_embed(text,text,text,text,text,text,boolean)
 function ai.cohere_list_models(text,text,text,boolean,boolean)
 function ai.cohere_rerank_simple(text,text,text[],text,text,integer,integer,boolean)
 function ai.cohere_rerank(text,text,text[],text,text,integer,integer,boolean)
 function ai.cohere_tokenize(text,text,text,text,boolean)
 function ai.execute_vectorizer(integer)
 function ai.grant_ai_usage(name,boolean)
 function ai.grant_secret(text,text)
 function ai.litellm_embed(text,text,text,text,jsonb,boolean)
 function ai.litellm_embed(text,text[],text,text,jsonb,boolean)
 function ai.load_dataset_multi_txn(text,text,text,name,name,text,jsonb,integer,integer,integer,jsonb)
 function ai.load_dataset(text,text,text,name,name,text,jsonb,integer,integer,jsonb)
 function ai.ollama_chat_complete(text,jsonb,text,text,jsonb,jsonb,jsonb,boolean)
 function ai.ollama_embed(text,text,text,text,jsonb,boolean)
 function ai.ollama_generate(text,text,text,bytea[],text,jsonb,text,text,integer[],boolean)
 function ai.ollama_list_models(text,boolean)
 function ai.ollama_ps(text,boolean)
 function ai.openai_chat_complete_simple(text,text,text,boolean,jsonb)
 function ai.openai_chat_complete(text,jsonb,text,text,double precision,jsonb,boolean,integer,integer,integer,integer,double precision,jsonb,integer,text,double precision,double precision,jsonb,text,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_chat_complete_with_raw_response(text,jsonb,text,text,double precision,jsonb,boolean,integer,integer,integer,integer,double precision,jsonb,integer,text,double precision,double precision,jsonb,text,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_client_config(text,double precision,text,text,integer,jsonb,jsonb)
 function ai.openai_detokenize(text,integer[])
 function ai.openai_embed(text,integer[],text,text,integer,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_embed(text,text,text,text,integer,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_embed(text,text[],text,text,integer,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_embed_with_raw_response(text,integer[],text,text,integer,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_embed_with_raw_response(text,text,text,text,integer,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_embed_with_raw_response(text,text[],text,text,integer,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_list_models(text,text,jsonb,jsonb,boolean,jsonb)
 function ai.openai_list_models_with_raw_response(text,text,jsonb,jsonb,boolean,jsonb)
 function ai.openai_moderate(text,text,text,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_moderate_with_raw_response(text,text,text,text,jsonb,jsonb,jsonb,boolean,jsonb)
 function ai.openai_tokenize(text,text)
 function ai.reveal_secret(text,boolean)
 function ai.revoke_secret(text,text)
 function ai.voyageai_embed(text,text,text,text,text,boolean)
 function ai.voyageai_embed(text,text[],text,text,text,boolean)
 table ai.feature_flag
 table ai.migration
 table ai._secret_permissions
 type ai.feature_flag
 type ai.feature_flag[]
 type ai.migration
 type ai.migration[]
 type ai._secret_permissions
 type ai._secret_permissions[]
 type ai.secret_permissions
 type ai.secret_permissions[]
 view ai.secret_permissions
(57 rows)

                                    Table "ai._secret_permissions"
 Column | Type | Collation | Nullable | Default | Storage  | Compression | Stats target | Description 
--------+------+-----------+----------+---------+----------+-------------+--------------+-------------
 name   | text |           | not null |         | extended |             |              | 
 role   | text |           | not null |         | extended |             |              | 
Indexes:
    "_secret_permissions_pkey" PRIMARY KEY, btree (name, role)
Check constraints:
    "_secret_permissions_name_check" CHECK (name = '*'::text OR name ~ '^[A-Za-z0-9_.]+$'::text)
Access method: heap

             Index "ai._secret_permissions_pkey"
 Column | Type | Key? | Definition | Storage  | Stats target 
--------+------+------+------------+----------+--------------
 name   | text | yes  | name       | extended | 
 role   | text | yes  | role       | extended | 
primary key, btree, for table "ai._secret_permissions"

                                                            Table "ai.feature_flag"
       Column       |           Type           | Collation | Nullable |      Default      | Storage  | Compression | Stats target | Description 
--------------------+--------------------------+-----------+----------+-------------------+----------+-------------+--------------+-------------
 name               | text                     |           | not null |                   | extended |             |              | 
 applied_at_version | text                     |           | not null |                   | extended |             |              | 
 applied_at         | timestamp with time zone |           | not null | clock_timestamp() | plain    |             |              | 
Indexes:
    "feature_flag_pkey" PRIMARY KEY, btree (name)
Access method: heap

                Index "ai.feature_flag_pkey"
 Column | Type | Key? | Definition | Storage  | Stats target 
--------+------+------+------------+----------+--------------
 name   | text | yes  | name       | extended | 
primary key, btree, for table "ai.feature_flag"

                                                              Table "ai.migration"
       Column       |           Type           | Collation | Nullable |      Default      | Storage  | Compression | Stats target | Description 
--------------------+--------------------------+-----------+----------+-------------------+----------+-------------+--------------+-------------
 name               | text                     |           | not null |                   | extended |             |              | 
 applied_at_version | text                     |           | not null |                   | extended |             |              | 
 applied_at         | timestamp with time zone |           | not null | clock_timestamp() | plain    |             |              | 
 body               | text                     |           | not null |                   | extended |             |              | 
Indexes:
    "migration_pkey" PRIMARY KEY, btree (name)
Access method: heap

                  Index "ai.migration_pkey"
 Column | Type | Key? | Definition | Storage  | Stats target 
--------+------+------+------------+----------+--------------
 name   | text | yes  | name       | extended | 
primary key, btree, for table "ai.migration"

                      View "ai.secret_permissions"
 Column | Type | Collation | Nullable | Default | Storage  | Description 
--------+------+-----------+----------+---------+----------+-------------
 name   | text |           |          |         | extended | 
 role   | text |           |          |         | extended | 
View definition:
 SELECT name,
    role
   FROM ai._secret_permissions
  WHERE to_regrole(role) IS NOT NULL AND pg_has_role(CURRENT_USER, role::name, 'member'::text);

