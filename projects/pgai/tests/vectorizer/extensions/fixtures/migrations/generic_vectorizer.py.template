"""Generic vectorizer migration template.

Revision ID: {revision_id}
Revises: {revises}
Create Date: {create_date}
"""
from alembic import op
from sqlalchemy import Column, Integer, String, Text
from sqlalchemy import text
from pgai.vectorizer.configuration import (
    OpenAIConfig,
    OllamaConfig,
    CharacterTextSplitterConfig,
    RecursiveCharacterTextSplitterConfig,
    HNSWIndexingConfig,
    PythonTemplateConfig,
    TimescaleSchedulingConfig,
    ProcessingConfig,
)

# revision identifiers, used by Alembic
revision = '{revision_id}'
down_revision = {down_revision}
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Create a generic blog table that we can use for all tests
    op.create_table(
        'blog',
        Column('id', Integer, primary_key=True),
        Column('title', String(200), nullable=False),
        Column('content', Text, nullable=False),
        schema='public'
    )

    # Create vectorizer using the provided configuration
    {vectorizer_config}


def downgrade() -> None:
    connection = op.get_bind()
    # Look up the vectorizer ID
    result = connection.execute(
        text("SELECT id FROM ai.vectorizer WHERE source_table = 'blog'")
    ).scalar()
    
    if result is not None:
        print(f"Found vectorizer with ID: {{result}}")
        op.drop_vectorizer(result, drop_all=True)
    else:
        print("No vectorizer found!")
    
    # Drop the blog table
    op.drop_table('blog', schema='public')