"""OpenAI vectorizer migration template.

Revision ID: {revision_id}
Revises: {revises}
Create Date: {create_date}
"""
from alembic import op
from sqlalchemy import Column, Integer, String, Text
from pgai.vectorizer.configuration import (
    OpenAIConfig,
    CharacterTextSplitterConfig,
    ProcessingConfig,
    CreateVectorizerParams
)
from sqlalchemy import text

# revision identifiers, used by Alembic
revision = '{revision_id}'
down_revision = {down_revision}
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Create a documents table
    op.create_table(
        'documents',
        Column('id', Integer, primary_key=True),
        Column('title', String(255), nullable=False),
        Column('content', Text, nullable=False),
        schema='public'
    )

    # Create vectorizer with configuration classes
    op.create_vectorizer(
        source_table='public.documents',
        embedding=OpenAIConfig(
            model='text-embedding-3-small',
            dimensions=768,
            chat_user='test_user',
            api_key_name='TEST_OPENAI_KEY'
        ),
        chunking=CharacterTextSplitterConfig(
            chunk_column='content',
            chunk_size=256,
            chunk_overlap=20,
            separator='\n;',
            is_separator_regex=False
        ),
        processing=ProcessingConfig(
            batch_size=50,
            concurrency=2
        )
    )


def downgrade() -> None:
    connection = op.get_bind()
    # Look up the vectorizer ID
    result = connection.execute(
        text("SELECT id FROM ai.vectorizer WHERE source_table = 'public.documents'")
    ).scalar()
    
    if result is not None:
        print(f"Found vectorizer with ID:" + str(result))
        op.drop_vectorizer(result, drop_all=True)
    else:
        print("No vectorizer found!")
    
    # Drop the articles table
    op.drop_table('documents', schema='public')