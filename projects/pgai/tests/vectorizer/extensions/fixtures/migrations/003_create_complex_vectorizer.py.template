"""Complex vectorizer migration template.

Revision ID: {revision_id}
Revises: {revises}
Create Date: {create_date}
"""
from alembic import op
from sqlalchemy import Column, DateTime, Integer, String, Text
from pgai.vectorizer.configuration import (
    VoyageAIConfig,
    RecursiveCharacterTextSplitterConfig,
    DiskANNIndexingConfig,
    PythonTemplateConfig,
    TimescaleSchedulingConfig,
    ProcessingConfig,
    CreateVectorizerParams
)
from datetime import timedelta
from sqlalchemy import text

# revision identifiers, used by Alembic
revision = '{revision_id}'
down_revision = {down_revision}
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Create a more complex articles table with multiple fields
    op.create_table(
        'articles',
        Column('id', Integer, primary_key=True),
        Column('title', String(255), nullable=False),
        Column('content', Text, nullable=False),
        Column('author', String(100), nullable=False),
        Column('category', String(50), nullable=False),
        Column('published_at', DateTime, nullable=False),
        Column('tags', Text),  # Comma-separated tags
        Column('summary', Text),
        schema='public'
    )

    # Create the vectorizer with configuration classes
    op.create_vectorizer(
        source_table='public.articles',
        embedding=VoyageAIConfig(
            model='voyage-3-lite',
            dimensions=768,
            input_type='document',
            api_key_name='VOYAGE_TEST_API_KEY'
        ),
        chunking=RecursiveCharacterTextSplitterConfig(
            chunk_column='content',
            chunk_size=500,
            chunk_overlap=50,
            separators=['\n\n', '\n', '. ', '? ', '! '],
            is_separator_regex=False
        ),
        indexing=DiskANNIndexingConfig(
            min_rows=1000,
            storage_layout='memory_optimized',
            num_neighbors=16,
            search_list_size=128,
            create_when_queue_empty=True
        ),
        formatting=PythonTemplateConfig(
            template=(
                'Title: $title\n'
                'Category: $category\n'
                'Author: $author\n'
                'Published: $published_at\n'
                'Tags: $tags\n'
                'Summary: $summary\n'
                'Content:\n$chunk'
            )
        ),
        scheduling=TimescaleSchedulingConfig(
            schedule_interval=timedelta(hours=1),
            fixed_schedule=True,
            timezone='UTC'
        ),
        processing=ProcessingConfig(
            batch_size=100,
            concurrency=3
        )
    )


def downgrade() -> None:
    connection = op.get_bind()
    # Look up the vectorizer ID
    result = connection.execute(
        text("SELECT id FROM ai.vectorizer WHERE source_table = 'public.articles'")
    ).scalar()
    
    if result is not None:
        print(f"Found vectorizer with ID:" + str(result))
        op.drop_vectorizer(result, drop_all=True)
    else:
        print("No vectorizer found!")
    
    # Drop the articles table
    op.drop_table('articles', schema='public')