"""Ollama vectorizer migration template.

Revision ID: {revision_id}
Revises: {revises}
Create Date: {create_date}
"""
from alembic import op
from sqlalchemy import Column, Integer, String, Text
from pgai.vectorizer.configuration import (
    OllamaConfig,
    RecursiveCharacterTextSplitterConfig,
    PythonTemplateConfig,
    ProcessingConfig,
    CreateVectorizerParams
)
from sqlalchemy import text

# revision identifiers, used by Alembic
revision = '{revision_id}'
down_revision = {down_revision}
branch_labels = None
depends_on = None


def upgrade() -> None:
    # Create a code_snippets table
    op.create_table(
        'code_snippets',
        Column('id', Integer, primary_key=True),
        Column('language', String(50), nullable=False),
        Column('description', String(255), nullable=False),
        Column('code', Text, nullable=False),
        schema='public'
    )

    # Create vectorizer with configuration classes
    op.create_vectorizer(
        source_table='public.code_snippets',
        embedding=OllamaConfig(
            model='nomic-embed-text',
            dimensions=768,
            base_url='http://localhost:11434',
            keep_alive='5m'
        ),
        chunking=RecursiveCharacterTextSplitterConfig(
            chunk_column='code',
            chunk_size=300,
            chunk_overlap=30,
            separators=['\n\n', '\n', '; '],
            is_separator_regex=False
        ),
        formatting=PythonTemplateConfig(
            template='Language: $language\nDescription: $description\nCode:\n$chunk'
        ),
        processing=ProcessingConfig(
            batch_size=75,
            concurrency=2
        )
    )


def downgrade() -> None:
    connection = op.get_bind()
    # Look up the vectorizer ID
    result = connection.execute(
        text("SELECT id FROM ai.vectorizer WHERE source_table = 'public.code_snippets'")
    ).scalar()
    
    if result is not None:
        print("Found vectorizer with ID:" + str(result))
        op.drop_vectorizer(result, drop_all=True)
    else:
        print("No vectorizer found!")
    
    # Drop the code_snippets table
    op.drop_table('code_snippets', schema='public')