import psycopg

import pgai.semantic_catalog.builder as builder

from .utils import PostgresContainer

EMPTY_SET: set[str] = set()

ALL_TABLES: set[str] = {
    "account",
    "aircraft",
    "airport",
    "boarding_pass",
    "booking",
    "booking_leg",
    "events",
    "flight",
    "frequent_flyer",
    "passenger",
    "phone",
}

ALL_VIEWS: set[str] = {"events_daily", "flight_summary", "passenger_details"}

ALL_PROCS: set[str] = {"advance_air_time", "update_flight_status"}

TIMESCALE_PROCS: set[str] = {
    "accessorapproxpercentile_in",
    "accessorapproxpercentile_out",
    "accessorapproxpercentilerank_in",
    "accessorapproxpercentilerank_out",
    "accessoraverage_in",
    "accessoraverage_out",
    "accessoraveragex_in",
    "accessoraveragex_out",
    "accessoraveragey_in",
    "accessoraveragey_out",
    "accessorclose_in",
    "accessorclose_out",
    "accessorclosetime_in",
    "accessorclosetime_out",
    "accessorcorr_in",
    "accessorcorr_out",
    "accessorcounterzerotime_in",
    "accessorcounterzerotime_out",
    "accessorcovar_in",
    "accessorcovar_out",
    "accessordeadranges_in",
    "accessordeadranges_out",
    "accessordelta_in",
    "accessordelta_out",
    "accessordeterminationcoeff_in",
    "accessordeterminationcoeff_out",
    "accessordistinctcount_in",
    "accessordistinctcount_out",
    "accessordowntime_in",
    "accessordowntime_out",
    "accessordurationin_in",
    "accessordurationin_out",
    "accessordurationinint_in",
    "accessordurationinint_out",
    "accessordurationinrange_in",
    "accessordurationinrange_out",
    "accessordurationinrangeint_in",
    "accessordurationinrangeint_out",
    "accessorerror_in",
    "accessorerror_out",
    "accessorextrapolateddelta_in",
    "accessorextrapolateddelta_out",
    "accessorextrapolatedrate_in",
    "accessorextrapolatedrate_out",
    "accessorfirsttime_in",
    "accessorfirsttime_out",
    "accessorfirstval_in",
    "accessorfirstval_out",
    "accessorhigh_in",
    "accessorhigh_out",
    "accessorhightime_in",
    "accessorhightime_out",
    "accessorideltaleft_in",
    "accessorideltaleft_out",
    "accessorideltaright_in",
    "accessorideltaright_out",
    "accessorintegral_in",
    "accessorintegral_out",
    "accessorintercept_in",
    "accessorintercept_out",
    "accessorinterpolateddurationin_in",
    "accessorinterpolateddurationin_out",
    "accessorinterpolateddurationinint_in",
    "accessorinterpolateddurationinint_out",
    "accessorinterpolatedstateinttimeline_in",
    "accessorinterpolatedstateinttimeline_out",
    "accessorinterpolatedstateperiods_in",
    "accessorinterpolatedstateperiods_out",
    "accessorinterpolatedstateperiodsint_in",
    "accessorinterpolatedstateperiodsint_out",
    "accessorinterpolatedstatetimeline_in",
    "accessorinterpolatedstatetimeline_out",
    "accessorintoarray_in",
    "accessorintoarray_out",
    "accessorintointvalues_in",
    "accessorintointvalues_out",
    "accessorintovalues_in",
    "accessorintovalues_out",
    "accessorirateleft_in",
    "accessorirateleft_out",
    "accessorirateright_in",
    "accessorirateright_out",
    "accessorkurtosis_in",
    "accessorkurtosis_out",
    "accessorkurtosisx_in",
    "accessorkurtosisx_out",
    "accessorkurtosisy_in",
    "accessorkurtosisy_out",
    "accessorlasttime_in",
    "accessorlasttime_out",
    "accessorlastval_in",
    "accessorlastval_out",
    "accessorliveat_in",
    "accessorliveat_out",
    "accessorliveranges_in",
    "accessorliveranges_out",
    "accessorlow_in",
    "accessorlow_out",
    "accessorlowtime_in",
    "accessorlowtime_out",
    "accessormaxfrequencyint_in",
    "accessormaxfrequencyint_out",
    "accessormaxval_in",
    "accessormaxval_out",
    "accessormean_in",
    "accessormean_out",
    "accessorminfrequencyint_in",
    "accessorminfrequencyint_out",
    "accessorminval_in",
    "accessorminval_out",
    "accessornumchanges_in",
    "accessornumchanges_out",
    "accessornumelements_in",
    "accessornumelements_out",
    "accessornumgaps_in",
    "accessornumgaps_out",
    "accessornumliveranges_in",
    "accessornumliveranges_out",
    "accessornumresets_in",
    "accessornumresets_out",
    "accessornumvals_in",
    "accessornumvals_out",
    "accessoropen_in",
    "accessoropen_out",
    "accessoropentime_in",
    "accessoropentime_out",
    "accessorpercentilearray_in",
    "accessorpercentilearray_out",
    "accessorrate_in",
    "accessorrate_out",
    "accessorskewness_in",
    "accessorskewness_out",
    "accessorskewnessx_in",
    "accessorskewnessx_out",
    "accessorskewnessy_in",
    "accessorskewnessy_out",
    "accessorslope_in",
    "accessorslope_out",
    "accessorstateat_in",
    "accessorstateat_out",
    "accessorstateatint_in",
    "accessorstateatint_out",
    "accessorstateinttimeline_in",
    "accessorstateinttimeline_out",
    "accessorstateperiods_in",
    "accessorstateperiods_out",
    "accessorstateperiodsint_in",
    "accessorstateperiodsint_out",
    "accessorstatetimeline_in",
    "accessorstatetimeline_out",
    "accessorstddev_in",
    "accessorstddev_out",
    "accessorstddevx_in",
    "accessorstddevx_out",
    "accessorstddevy_in",
    "accessorstddevy_out",
    "accessorstderror_in",
    "accessorstderror_out",
    "accessorsum_in",
    "accessorsum_out",
    "accessorsumx_in",
    "accessorsumx_out",
    "accessorsumy_in",
    "accessorsumy_out",
    "accessortimedelta_in",
    "accessortimedelta_out",
    "accessortopn_in",
    "accessortopn_out",
    "accessortopncount_in",
    "accessortopncount_out",
    "accessorunnest_in",
    "accessorunnest_out",
    "accessoruptime_in",
    "accessoruptime_out",
    "accessorvariance_in",
    "accessorvariance_out",
    "accessorvariancex_in",
    "accessorvariancex_out",
    "accessorvariancey_in",
    "accessorvariancey_out",
    "accessorwithbounds_in",
    "accessorwithbounds_out",
    "accessorxintercept_in",
    "accessorxintercept_out",
    "add_columnstore_policy",
    "add_compression_policy",
    "add_continuous_aggregate_policy",
    "add_dimension",
    "add_job",
    "add_reorder_policy",
    "add_retention_policy",
    "alter_job",
    "approx_count_distinct",
    "approx_count_distinct_trans",
    "approx_percentile",
    "approx_percentile_array",
    "approx_percentile_rank",
    "approx_percentiles",
    "approximate_row_count",
    "arrow_add_unstable_element",
    "arrow_close",
    "arrow_close_time",
    "arrow_corr",
    "arrow_counter_agg_corr",
    "arrow_counter_agg_delta",
    "arrow_counter_agg_extrapolated_delta",
    "arrow_counter_agg_extrapolated_rate",
    "arrow_counter_agg_first_time",
    "arrow_counter_agg_first_val",
    "arrow_counter_agg_idelta_left",
    "arrow_counter_agg_idelta_right",
    "arrow_counter_agg_intercept",
    "arrow_counter_agg_irate_left",
    "arrow_counter_agg_irate_right",
    "arrow_counter_agg_last_time",
    "arrow_counter_agg_last_val",
    "arrow_counter_agg_num_changes",
    "arrow_counter_agg_num_elements",
    "arrow_counter_agg_num_resets",
    "arrow_counter_agg_rate",
    "arrow_counter_agg_slope",
    "arrow_counter_agg_time_delta",
    "arrow_counter_agg_with_bounds",
    "arrow_counter_agg_zero_time",
    "arrow_counter_interpolated_delta",
    "arrow_counter_interpolated_rate",
    "arrow_default_topn_bigint",
    "arrow_default_topn_text",
    "arrow_delta",
    "arrow_extrapolated_delta",
    "arrow_extrapolated_rate",
    "arrow_finalize_with_unnest",
    "arrow_force_materialize",
    "arrow_freq_bigint_iter",
    "arrow_freq_text_iter",
    "arrow_gauge_agg_rate",
    "arrow_heartbeat_agg_dead_ranges",
    "arrow_heartbeat_agg_downtime",
    "arrow_heartbeat_agg_interpolate",
    "arrow_heartbeat_agg_interpolated_downtime",
    "arrow_heartbeat_agg_interpolated_uptime",
    "arrow_heartbeat_agg_live_at",
    "arrow_heartbeat_agg_live_ranges",
    "arrow_heartbeat_agg_num_gaps",
    "arrow_heartbeat_agg_num_live_ranges",
    "arrow_heartbeat_agg_trim_to",
    "arrow_heartbeat_agg_uptime",
    "arrow_high",
    "arrow_high_time",
    "arrow_hyperloglog_count",
    "arrow_hyperloglog_error",
    "arrow_idelta_left",
    "arrow_idelta_right",
    "arrow_intercept",
    "arrow_irate_left",
    "arrow_irate_right",
    "arrow_low",
    "arrow_low_time",
    "arrow_max_bigint_frequency",
    "arrow_max_float_into_array",
    "arrow_max_float_into_values",
    "arrow_max_int_into_array",
    "arrow_max_int_into_values",
    "arrow_max_time_into_array",
    "arrow_max_time_into_values",
    "arrow_min_bigint_frequency",
    "arrow_min_float_into_array",
    "arrow_min_float_into_values",
    "arrow_min_int_into_array",
    "arrow_min_int_into_values",
    "arrow_min_time_into_array",
    "arrow_min_time_into_values",
    "arrow_num_changes",
    "arrow_num_elements",
    "arrow_open",
    "arrow_open_time",
    "arrow_pipeline_then_average",
    "arrow_pipeline_then_num_vals",
    "arrow_pipeline_then_sum",
    "arrow_run_pipeline",
    "arrow_run_pipeline_then_counter_agg",
    "arrow_run_pipeline_then_hyperloglog",
    "arrow_run_pipeline_then_materialize",
    "arrow_run_pipeline_then_percentile_agg",
    "arrow_run_pipeline_then_stats_agg",
    "arrow_run_pipeline_then_unnest",
    "arrow_slope",
    "arrow_state_agg_duration_in_int",
    "arrow_state_agg_duration_in_range_int",
    "arrow_state_agg_duration_in_range_string",
    "arrow_state_agg_duration_in_string",
    "arrow_state_agg_interpolated_duration_in_int",
    "arrow_state_agg_interpolated_duration_in_string",
    "arrow_state_agg_interpolated_state_int_timeline",
    "arrow_state_agg_interpolated_state_periods_int",
    "arrow_state_agg_interpolated_state_periods_string",
    "arrow_state_agg_interpolated_state_timeline",
    "arrow_state_agg_into_int_values",
    "arrow_state_agg_into_values",
    "arrow_state_agg_state_at_int",
    "arrow_state_agg_state_at_string",
    "arrow_state_agg_state_int_timeline",
    "arrow_state_agg_state_periods_int",
    "arrow_state_agg_state_periods_string",
    "arrow_state_agg_state_timeline",
    "arrow_stats1d_average",
    "arrow_stats1d_kurtosis",
    "arrow_stats1d_num_vals",
    "arrow_stats1d_skewness",
    "arrow_stats1d_stddev",
    "arrow_stats1d_sum",
    "arrow_stats1d_variance",
    "arrow_stats2d_average_x",
    "arrow_stats2d_average_y",
    "arrow_stats2d_corr",
    "arrow_stats2d_covar",
    "arrow_stats2d_determination_coeff",
    "arrow_stats2d_intercept",
    "arrow_stats2d_kurtosis_x",
    "arrow_stats2d_kurtosis_y",
    "arrow_stats2d_num_vals",
    "arrow_stats2d_skewness_x",
    "arrow_stats2d_skewness_y",
    "arrow_stats2d_slope",
    "arrow_stats2d_stdddev_x",
    "arrow_stats2d_stdddev_y",
    "arrow_stats2d_sum_x",
    "arrow_stats2d_sum_y",
    "arrow_stats2d_variance_x",
    "arrow_stats2d_variance_y",
    "arrow_stats2d_x_intercept",
    "arrow_tdigest_approx_percentile",
    "arrow_tdigest_approx_rank",
    "arrow_tdigest_max",
    "arrow_tdigest_mean",
    "arrow_tdigest_min",
    "arrow_tdigest_num_vals",
    "arrow_time_delta",
    "arrow_time_weight_first_time",
    "arrow_time_weight_first_val",
    "arrow_time_weight_last_time",
    "arrow_time_weight_last_val",
    "arrow_time_weighted_average_average",
    "arrow_time_weighted_average_integral",
    "arrow_time_weighted_average_interpolated_average",
    "arrow_time_weighted_average_interpolated_integral",
    "arrow_timevector_asof",
    "arrow_timevector_unnest",
    "arrow_topn_bigint",
    "arrow_topn_text",
    "arrow_uddsketch_approx_percentile",
    "arrow_uddsketch_approx_percentile_array",
    "arrow_uddsketch_approx_rank",
    "arrow_uddsketch_error",
    "arrow_uddsketch_mean",
    "arrow_uddsketch_num_vals",
    "arrow_with_bounds",
    "arrow_zero_time",
    "asap_final",
    "asap_smooth",
    "asap_trans",
    "attach_tablespace",
    "average",
    "average_x",
    "average_y",
    "by_hash",
    "by_range",
    "cagg_migrate",
    "candlestick",
    "candlestick_agg",
    "candlestick_combine",
    "candlestick_deserialize",
    "candlestick_final",
    "candlestick_in",
    "candlestick_out",
    "candlestick_rollup_trans",
    "candlestick_serialize",
    "chunk_columnstore_stats",
    "chunk_compression_stats",
    "chunks_detailed_size",
    "close",
    "close_time",
    "compress_chunk",
    "convert_to_columnstore",
    "convert_to_rowstore",
    "corr",
    "counter_agg",
    "counter_agg_combine",
    "counter_agg_final",
    "counter_agg_summary_trans",
    "counter_agg_trans",
    "counter_agg_trans_no_bounds",
    "counter_summary_trans_deserialize",
    "counter_summary_trans_serialize",
    "counter_zero_time",
    "counterinterpolateddeltaaccessor_in",
    "counterinterpolateddeltaaccessor_out",
    "counterinterpolatedrateaccessor_in",
    "counterinterpolatedrateaccessor_out",
    "countersummary_in",
    "countersummary_out",
    "covariance",
    "create_hypertable",
    "days_in_month",
    "dead_ranges",
    "decompress_chunk",
    "delete_job",
    "delta",
    "detach_tablespace",
    "detach_tablespaces",
    "determination_coeff",
    "disable_chunk_skipping",
    "distinct_count",
    "downtime",
    "drop_chunks",
    "duration_in",
    "enable_chunk_skipping",
    "error",
    "extrapolated_delta",
    "extrapolated_rate",
    "finalize_with_average",
    "finalize_with_num_vals",
    "finalize_with_sum",
    "first",
    "first_time",
    "first_val",
    "get_telemetry_report",
    "heartbeat_agg",
    "heartbeat_final",
    "heartbeat_rollup_trans",
    "heartbeat_trans",
    "heartbeatagg_in",
    "heartbeatagg_out",
    "heartbeatinterpolateaccessor_in",
    "heartbeatinterpolateaccessor_out",
    "heartbeatinterpolateddowntimeaccessor_in",
    "heartbeatinterpolateddowntimeaccessor_out",
    "heartbeatinterpolateduptimeaccessor_in",
    "heartbeatinterpolateduptimeaccessor_out",
    "heartbeattrimtoaccessor_in",
    "heartbeattrimtoaccessor_out",
    "high",
    "high_time",
    "histogram",
    "hyperloglog",
    "hyperloglog_combine",
    "hyperloglog_deserialize",
    "hyperloglog_final",
    "hyperloglog_in",
    "hyperloglog_out",
    "hyperloglog_serialize",
    "hyperloglog_trans",
    "hyperloglog_union",
    "hypertable_approximate_detailed_size",
    "hypertable_approximate_size",
    "hypertable_columnstore_stats",
    "hypertable_compression_stats",
    "hypertable_detailed_size",
    "hypertable_index_size",
    "hypertable_size",
    "idelta_left",
    "idelta_right",
    "integral",
    "intercept",
    "interpolate",
    "interpolated_average",
    "interpolated_delta",
    "interpolated_downtime",
    "interpolated_duration_in",
    "interpolated_integral",
    "interpolated_rate",
    "interpolated_state_int_timeline",
    "interpolated_state_periods",
    "interpolated_state_timeline",
    "interpolated_uptime",
    "into_array",
    "into_int_values",
    "into_values",
    "irate_left",
    "irate_right",
    "kurtosis",
    "kurtosis_x",
    "kurtosis_y",
    "last",
    "last_time",
    "last_val",
    "live_at",
    "live_ranges",
    "locf",
    "low",
    "low_time",
    "lttb",
    "lttb_final",
    "lttb_trans",
    "max_frequency",
    "max_n",
    "max_n_by",
    "max_n_by_float_final",
    "max_n_by_float_rollup_trans",
    "max_n_by_float_trans",
    "max_n_by_int_final",
    "max_n_by_int_rollup_trans",
    "max_n_by_int_trans",
    "max_n_by_time_final",
    "max_n_by_time_rollup_trans",
    "max_n_by_time_trans",
    "max_n_float_combine",
    "max_n_float_deserialize",
    "max_n_float_final",
    "max_n_float_rollup_trans",
    "max_n_float_serialize",
    "max_n_float_trans",
    "max_n_int_combine",
    "max_n_int_deserialize",
    "max_n_int_final",
    "max_n_int_rollup_trans",
    "max_n_int_serialize",
    "max_n_int_trans",
    "max_n_time_combine",
    "max_n_time_deserialize",
    "max_n_time_final",
    "max_n_time_rollup_trans",
    "max_n_time_serialize",
    "max_n_time_trans",
    "max_val",
    "maxbyfloats_in",
    "maxbyfloats_out",
    "maxbyints_in",
    "maxbyints_out",
    "maxbytimes_in",
    "maxbytimes_out",
    "maxfloats_in",
    "maxfloats_out",
    "maxints_in",
    "maxints_out",
    "maxtimes_in",
    "maxtimes_out",
    "mcv_agg",
    "mcv_agg_bigint_trans",
    "mcv_agg_text_trans",
    "mcv_agg_trans",
    "mcv_agg_with_skew_bigint_trans",
    "mcv_agg_with_skew_text_trans",
    "mcv_agg_with_skew_trans",
    "mean",
    "merge_chunks",
    "min_frequency",
    "min_n",
    "min_n_by",
    "min_n_by_float_final",
    "min_n_by_float_rollup_trans",
    "min_n_by_float_trans",
    "min_n_by_int_final",
    "min_n_by_int_rollup_trans",
    "min_n_by_int_trans",
    "min_n_by_time_final",
    "min_n_by_time_rollup_trans",
    "min_n_by_time_trans",
    "min_n_float_combine",
    "min_n_float_deserialize",
    "min_n_float_final",
    "min_n_float_rollup_trans",
    "min_n_float_serialize",
    "min_n_float_trans",
    "min_n_int_combine",
    "min_n_int_deserialize",
    "min_n_int_final",
    "min_n_int_rollup_trans",
    "min_n_int_serialize",
    "min_n_int_trans",
    "min_n_time_combine",
    "min_n_time_deserialize",
    "min_n_time_final",
    "min_n_time_rollup_trans",
    "min_n_time_serialize",
    "min_n_time_trans",
    "min_val",
    "minbyfloats_in",
    "minbyfloats_out",
    "minbyints_in",
    "minbyints_out",
    "minbytimes_in",
    "minbytimes_out",
    "minfloats_in",
    "minfloats_out",
    "minints_in",
    "minints_out",
    "mintimes_in",
    "mintimes_out",
    "month_normalize",
    "move_chunk",
    "num_changes",
    "num_elements",
    "num_gaps",
    "num_live_ranges",
    "num_resets",
    "num_vals",
    "open",
    "open_time",
    "percentile_agg",
    "percentile_agg_trans",
    "rate",
    "raw_mcv_agg",
    "recompress_chunk",
    "refresh_continuous_aggregate",
    "remove_columnstore_policy",
    "remove_compression_policy",
    "remove_continuous_aggregate_policy",
    "remove_reorder_policy",
    "remove_retention_policy",
    "reorder_chunk",
    "rolling",
    "rollup",
    "rollup_agg_bigint_trans",
    "rollup_agg_text_trans",
    "rollup_agg_trans",
    "run_job",
    "set_adaptive_chunking",
    "set_chunk_time_interval",
    "set_integer_now_func",
    "set_number_partitions",
    "set_partitioning_interval",
    "show_chunks",
    "show_tablespaces",
    "skewness",
    "skewness_x",
    "skewness_y",
    "slope",
    "space_saving_bigint_final",
    "space_saving_combine",
    "space_saving_deserialize",
    "space_saving_final",
    "space_saving_serialize",
    "space_saving_text_final",
    "spacesavingaggregate_in",
    "spacesavingaggregate_out",
    "spacesavingbigintaggregate_in",
    "spacesavingbigintaggregate_out",
    "spacesavingtextaggregate_in",
    "spacesavingtextaggregate_out",
    "state_agg",
    "state_agg_combine_fn_outer",
    "state_agg_deserialize_fn_outer",
    "state_agg_finally_fn_outer",
    "state_agg_int_trans",
    "state_agg_rollup_combine",
    "state_agg_rollup_deserialize",
    "state_agg_rollup_final",
    "state_agg_rollup_serialize",
    "state_agg_rollup_trans",
    "state_agg_serialize_fn_outer",
    "state_agg_transition_fn_outer",
    "state_at",
    "state_at_int",
    "state_int_timeline",
    "state_periods",
    "state_timeline",
    "stateagg_in",
    "stateagg_out",
    "stats1d_combine",
    "stats1d_final",
    "stats1d_inv_trans",
    "stats1d_summary_inv_trans",
    "stats1d_summary_trans",
    "stats1d_tf_final",
    "stats1d_tf_inv_trans",
    "stats1d_tf_trans",
    "stats1d_trans",
    "stats1d_trans_deserialize",
    "stats1d_trans_serialize",
    "stats2d_combine",
    "stats2d_final",
    "stats2d_inv_trans",
    "stats2d_summary_inv_trans",
    "stats2d_summary_trans",
    "stats2d_tf_final",
    "stats2d_tf_inv_trans",
    "stats2d_tf_trans",
    "stats2d_trans",
    "stats2d_trans_deserialize",
    "stats2d_trans_serialize",
    "stats_agg",
    "stats_agg_no_inv",
    "statssummary1d_in",
    "statssummary1d_out",
    "statssummary2d_in",
    "statssummary2d_out",
    "stddev",
    "stddev_x",
    "stddev_y",
    "stderror",
    "sum",
    "sum_x",
    "sum_y",
    "tdigest",
    "tdigest_combine",
    "tdigest_compound_combine",
    "tdigest_compound_deserialize",
    "tdigest_compound_final",
    "tdigest_compound_serialize",
    "tdigest_compound_trans",
    "tdigest_deserialize",
    "tdigest_final",
    "tdigest_in",
    "tdigest_out",
    "tdigest_serialize",
    "tdigest_trans",
    "tick_data_no_vol_transition",
    "tick_data_transition",
    "time_bucket",
    "time_bucket_gapfill",
    "time_delta",
    "time_weight",
    "time_weight_combine",
    "time_weight_final",
    "time_weight_summary_trans",
    "time_weight_trans",
    "time_weight_trans_deserialize",
    "time_weight_trans_serialize",
    "timescaledb_post_restore",
    "timescaledb_pre_restore",
    "timevector",
    "timevector_combine",
    "timevector_deserialize",
    "timevector_final",
    "timevector_serialize",
    "timevector_tstz_f64_compound_trans",
    "timevector_tstz_f64_in",
    "timevector_tstz_f64_out",
    "timevector_tstz_f64_trans",
    "timeweightinterpolatedaverageaccessor_in",
    "timeweightinterpolatedaverageaccessor_out",
    "timeweightinterpolatedintegralaccessor_in",
    "timeweightinterpolatedintegralaccessor_out",
    "timeweightsummary_in",
    "timeweightsummary_out",
    "to_epoch",
    "topn",
    "total",
    "trim_to",
    "uddsketch",
    "uddsketch_combine",
    "uddsketch_compound_trans",
    "uddsketch_deserialize",
    "uddsketch_final",
    "uddsketch_in",
    "uddsketch_out",
    "uddsketch_serialize",
    "uddsketch_trans",
    "unnest",
    "uptime",
    "variance",
    "variance_x",
    "variance_y",
    "volume",
    "vwap",
    "with_bounds",
    "x_intercept",
}


async def get_table_names(con: psycopg.AsyncConnection, oids: list[int]) -> set[str]:
    async with con.cursor() as cur:
        await cur.execute(
            """
            select distinct k.relname
            from pg_class k
            where k.oid = any(%s)
            and k.relkind in ('r', 'p', 'f')
        """,
            (oids,),
        )
        return {str(row[0]) for row in await cur.fetchall()}


async def get_view_names(con: psycopg.AsyncConnection, oids: list[int]) -> set[str]:
    async with con.cursor() as cur:
        await cur.execute(
            """
            select distinct k.relname
            from pg_class k
            where k.oid = any(%s)
            and k.relkind in ('v', 'm')
        """,
            (oids,),
        )
        return {str(row[0]) for row in await cur.fetchall()}


async def get_proc_names(con: psycopg.AsyncConnection, oids: list[int]) -> set[str]:
    async with con.cursor() as cur:
        await cur.execute(
            """
            select distinct p.proname
            from pg_proc p
            where p.oid = any(%s)
        """,
            (oids,),
        )
        return {str(row[0]) for row in await cur.fetchall()}


async def test_find_tables(container: PostgresContainer):
    tests: list[tuple[dict[str, str], set[str]]] = [
        ({"include_schema": "public"}, EMPTY_SET),
        ({"include_schema": "^public$"}, EMPTY_SET),
        ({"include_schema": "public$"}, EMPTY_SET),
        ({"include_schema": "^pub"}, EMPTY_SET),
        ({"include_schema": "postgres_air"}, ALL_TABLES),
        ({"include_schema": "^postgres_air$"}, ALL_TABLES),
        ({"include_schema": "_air$"}, ALL_TABLES),
        ({"exclude_schema": "public"}, ALL_TABLES),
        ({"exclude_schema": "^public$"}, ALL_TABLES),
        ({"exclude_schema": "public$"}, ALL_TABLES),
        ({"exclude_schema": "^pub"}, ALL_TABLES),
        ({"exclude_schema": "postgres_air"}, EMPTY_SET),
        ({"exclude_schema": "^postgres_air$"}, EMPTY_SET),
        ({"exclude_schema": "_air$"}, EMPTY_SET),
        ({"exclude_schema": "^pub", "include_schema": "_air$"}, ALL_TABLES),
        ({"exclude_schema": "_air$", "include_schema": "^pub"}, EMPTY_SET),
        ({"include_table": ".*"}, ALL_TABLES),
        ({"include_table": "(airport|aircraft)"}, {"airport", "aircraft"}),
        ({"exclude_table": "(airport|aircraft)"}, ALL_TABLES - {"airport", "aircraft"}),
        ({"include_table": "bob"}, EMPTY_SET),
        ({"include_table": "^booking"}, {"booking", "booking_leg"}),
        ({"exclude_schema": "_air$", "include_table": ".*"}, EMPTY_SET),
        ({"include_schema": "^postgres_air$", "exclude_table": ".*"}, EMPTY_SET),
        ({"exclude_schema": "^public$", "exclude_table": ".*"}, EMPTY_SET),
        (
            {"exclude_schema": "^public$", "include_table": "^a"},
            {"account", "aircraft", "airport"},
        ),
    ]
    async with await psycopg.AsyncConnection.connect(
        container.connection_string(database="postgres_air")
    ) as con:
        for test in tests:
            args, expected = test
            oids = await builder.find_tables(con, **args)
            actual = await get_table_names(con, oids)
            assert actual == expected, f"find_tables with {args} failed"


async def test_find_views(container: PostgresContainer):
    tests: list[tuple[dict[str, str], set[str]]] = [
        ({"include_schema": "public"}, EMPTY_SET),
        ({"include_schema": "^public$"}, EMPTY_SET),
        ({"include_schema": "public$"}, EMPTY_SET),
        ({"include_schema": "^pub"}, EMPTY_SET),
        ({"include_schema": "postgres_air"}, ALL_VIEWS),
        ({"include_schema": "^postgres_air$"}, ALL_VIEWS),
        ({"include_schema": "_air$"}, ALL_VIEWS),
        ({"exclude_schema": "public"}, ALL_VIEWS),
        ({"exclude_schema": "^public$"}, ALL_VIEWS),
        ({"exclude_schema": "public$"}, ALL_VIEWS),
        ({"exclude_schema": "^pub"}, ALL_VIEWS),
        ({"exclude_schema": "postgres_air"}, EMPTY_SET),
        ({"exclude_schema": "^postgres_air$"}, EMPTY_SET),
        ({"exclude_schema": "_air$"}, EMPTY_SET),
        ({"exclude_schema": "^pub", "include_schema": "_air$"}, ALL_VIEWS),
        ({"exclude_schema": "_air$", "include_schema": "^pub"}, EMPTY_SET),
        ({"include_view": ".*"}, ALL_VIEWS),
        (
            {"include_view": "(passenger_details|flight_summary|events_daily)"},
            ALL_VIEWS,
        ),
        (
            {"exclude_view": "(flight_summary|events_daily)"},
            {"passenger_details"},
        ),
        ({"include_view": "bob"}, EMPTY_SET),
        ({"include_view": "^flight"}, {"flight_summary"}),
        ({"exclude_schema": "_air$", "include_view": ".*"}, EMPTY_SET),
        ({"include_schema": "^postgres_air$", "exclude_view": ".*"}, EMPTY_SET),
        ({"exclude_schema": "^public$", "exclude_view": ".*"}, EMPTY_SET),
        ({"exclude_schema": "^public$", "include_view": "^f"}, {"flight_summary"}),
    ]
    async with await psycopg.AsyncConnection.connect(
        container.connection_string(database="postgres_air")
    ) as con:
        for test in tests:
            args, expected = test
            oids = await builder.find_views(con, **args)
            actual = await get_view_names(con, oids)
            assert actual == expected, f"find_views with {args} failed"


async def test_find_procs(container: PostgresContainer):
    tests: list[tuple[dict[str, str], set[str]]] = [
        ({"include_schema": "public"}, TIMESCALE_PROCS),
        ({"include_schema": "^public$"}, TIMESCALE_PROCS),
        ({"include_schema": "public$"}, TIMESCALE_PROCS),
        ({"include_schema": "^pub"}, TIMESCALE_PROCS),
        ({"include_schema": "postgres_air"}, ALL_PROCS),
        ({"include_schema": "^postgres_air$"}, ALL_PROCS),
        ({"include_schema": "_air$"}, ALL_PROCS),
        ({"exclude_schema": "public"}, ALL_PROCS),
        ({"exclude_schema": "^public$"}, ALL_PROCS),
        ({"exclude_schema": "public$"}, ALL_PROCS),
        ({"exclude_schema": "^pub"}, ALL_PROCS),
        ({"exclude_schema": "postgres_air"}, TIMESCALE_PROCS),
        ({"exclude_schema": "^postgres_air$"}, TIMESCALE_PROCS),
        ({"exclude_schema": "_air$"}, TIMESCALE_PROCS),
        ({"exclude_schema": "^pub", "include_schema": "_air$"}, ALL_PROCS),
        ({"exclude_schema": "_air$", "include_schema": "^pub"}, TIMESCALE_PROCS),
        ({"include_proc": ".*"}, ALL_PROCS | TIMESCALE_PROCS),
        ({"include_proc": "(advance_air_time|update_flight_status)"}, ALL_PROCS),
        (
            {"exclude_proc": "advance_air_time"},
            {"update_flight_status"} | TIMESCALE_PROCS,
        ),
        ({"include_proc": "bob"}, EMPTY_SET),
        ({"include_proc": "^advance"}, {"advance_air_time"}),
        ({"exclude_schema": "_air$", "include_proc": ".*"}, TIMESCALE_PROCS),
        ({"include_schema": "^postgres_air$", "exclude_proc": ".*"}, EMPTY_SET),
        ({"exclude_schema": "^public$", "exclude_proc": ".*"}, EMPTY_SET),
        (
            {"exclude_schema": "^public$", "include_proc": "^u"},
            {"update_flight_status"},
        ),
    ]
    async with await psycopg.AsyncConnection.connect(
        container.connection_string(database="postgres_air")
    ) as con:
        for test in tests:
            args, expected = test
            oids = await builder.find_procedures(con, **args)
            actual = await get_proc_names(con, oids)
            assert actual == expected, f"find_procs with {args} failed"
